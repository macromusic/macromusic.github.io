Attribute VB_Name = "xRefExtrctData"
'Includes CSeriesData
'Includes CVrblToSht
'Includes PfixGetSheetRangeDataVariant
'Includes PfixChangeModuleConstValue
'Includes x

Option Explicit
Option Base 1

'◆ModuleProc名_元データから必要なデータを取得する
'Rev.001
  
'//モジュールメモリ
  Private Const meMstrMdlName As String = "xRefExtrctData"
  Private Const meMlonExeNum As Long = 0

'//モジュール内定数_列挙体
Private Enum EnumX
'列挙体使用時の表記 : EnumX.rowX
'■myEnumの表記ルール
    '①シートNo. : "sht" & "Enum名" & " = " & "値" & "'シート名"
    '②行No.     : "row" & "Enum名" & " = " & "値" & "'検索するシート上の文字列"
    '③列No.     : "col" & "Enum名" & " = " & "値" & "'検索するシート上の文字列"
    '④行No.     : "row" & "Enum名" & " = " & "値" & "'comment" & "'検索するコメントの文字列"
    '⑤列No.     : "col" & "Enum名" & " = " & "値" & "'comment" & "'検索するコメントの文字列"
    
    shtExe1 = 1         '抜粋
    rowBgn = 1          'コード
    colBgn = 1          'コード
    rowPst = 1          '銘柄コード
    ColPst = 4          '銘柄コード
    RowOfset1 = 1
    
    shtExe2 = 2         '元データ
    rowOrg = 3          '銘柄コード
    colOrg = 2          '銘柄コード
    RowOfset2 = 1
    
End Enum
  
'//出力制御信号
  Private myXbisCmpltFlag As Boolean
  
'//モジュール内変数_制御信号
  Private myXbisExitFlag As Boolean
  
'//モジュール内変数_データ
  Private myXlonSrsDataCnt As Long, myZstrSrsData() As String
    'myZstrSrsData(k) : 取得文字列
  Private myXbisRowDrctn As Boolean
    'myXbisRowDrctn = True  : 行方向のみを検索
    'myXbisRowDrctn = False : 列方向のみを検索
  Private myXlonExtShtNo As Long, myXobjExtSheet As Object
  Private myXlonBgnRow As Long, myXlonBgnCol As Long

  Private myXobjOrgSheet As Object, myXobjFrstCell As Object, myXobjLastCell As Object
  Private myXlonRowCnt As Long, myXlonColCnt As Long, myZvarShtData As Variant
    'myZvarShtData(i, j) : シートデータ

  Private myXlonArngDataCnt As Long, myZvarArngData() As Variant

  Private myXobjPstFrstCell As Object

'iniP_モジュール内変数を初期化する
Private Sub initializeModuleVariables()
    myXbisExitFlag = False
    
    myXlonSrsDataCnt = Empty: Erase myZstrSrsData
    myXbisRowDrctn = False
    myXlonExtShtNo = Empty: Set myXobjExtSheet = Nothing
    myXlonBgnRow = Empty: myXlonBgnCol = Empty
    Set myXobjOrgSheet = Nothing
    Set myXobjFrstCell = Nothing: Set myXobjLastCell = Nothing
    myXlonRowCnt = Empty: myXlonColCnt = Empty: myZvarShtData = Empty
    myXlonArngDataCnt = Empty: Erase myZvarArngData
    Set myXobjPstFrstCell = Nothing
End Sub

'-----------------------------------------------------------------------------------------------

'PublicP_モジュールメモリのリセット
Public Sub resetConstant()
  Dim myXstrMdlName As String: myXstrMdlName = meMstrMdlName
  Dim myZvarM(1, 2) As Variant
    myZvarM(1, 1) = "meMlonExeNum": myZvarM(1, 2) = 0
    Call PfixChangeModuleConstValue(myXbisExitFlag, myXstrMdlName, myZvarM)
End Sub

'PublicP_
Public Sub exeProc()
    
'//処理実行
    Call callxRefExtrctData
    
'//処理結果表示
    Select Case myXbisCmpltFlag
        Case True: MsgBox "実行完了"
        Case Else: MsgBox "異常あり", vbExclamation
    End Select
    
End Sub

'PublicP_
Public Sub callProc(myXbisCmpltFlagOUT As Boolean)
Application.ScreenUpdating = False
    
'//出力変数を初期化
    myXbisCmpltFlagOUT = False
    
'//処理実行
    Call ctrProc
    If myXbisCmpltFlag = False Then Exit Sub
    
'//出力変数に格納
    myXbisCmpltFlagOUT = myXbisCmpltFlag
    
Application.ScreenUpdating = True
End Sub

'CtrlP_
Private Sub ctrProc()
    Call initializeOutputVariables
    Call initializeModuleVariables
    Call remProc: If myXbisExitFlag = True Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "1"     'PassFlag
    
'//C:制御用変数を設定
    Call setControlVariables
    
'//S:シート上の連続するデータ範囲を取得
    Call instCSeriesData
    If myXlonSrsDataCnt <= 0 Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "2"     'PassFlag
    
'//S:シート上の指定範囲またはデータ全範囲のデータをVariant変数に取込む
    Call snsProc
    If myXbisExitFlag = True Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "2"     'PassFlag
    
'//P:元データから必要なデータを抽出
    Call prsProc
    If myXbisExitFlag = True Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "3"     'PassFlag
    
'//Run:変数情報をエクセルシートに書き出す
    Call instCVrblToSht
    If myXbisExitFlag = True Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "4"     'PassFlag
    
    myXbisCmpltFlag = True
ExitPath:
    If coXbisTestMode = False Then Call recProc
    Call initializeModuleVariables
End Sub

'iniP_出力変数を初期化する
Private Sub initializeOutputVariables()
    myXbisCmpltFlag = False
End Sub

'RemP_モジュールメモリに保存した変数を取り出す
Private Sub remProc()
    myXbisExitFlag = False
    On Error GoTo ExitPath
    
    On Error GoTo 0
    Exit Sub
ExitPath:
    myXbisExitFlag = True
End Sub

'SetP_制御用変数を設定する
Private Sub setControlVariables()

    myXbisRowDrctn = True
    
    myXlonExtShtNo = EnumX.shtExe1
    Set myXobjExtSheet = ThisWorkbook.Worksheets(myXlonExtShtNo)
    
    myXlonBgnRow = EnumX.rowBgn + EnumX.RowOfset1
    myXlonBgnCol = EnumX.colBgn
    
  Dim myXlonPstRow As Long, myXlonPstCol As Long
    myXlonPstRow = EnumX.rowPst + EnumX.RowOfset1
    myXlonPstCol = EnumX.ColPst
    Set myXobjPstFrstCell = ThisWorkbook.Worksheets(myXlonExtShtNo)
    Set myXobjPstFrstCell = myXobjPstFrstCell.Cells(myXlonPstRow, myXlonPstCol)
    
  Dim myXlonOrgShtNo As Long, myXlonFrstRow As Long, myXlonFrstCol As Long
    myXlonOrgShtNo = EnumX.shtExe2
    Set myXobjOrgSheet = ThisWorkbook.Worksheets(myXlonOrgShtNo)
    myXlonFrstRow = EnumX.rowOrg + EnumX.RowOfset2
    myXlonFrstCol = EnumX.colOrg
    Set myXobjFrstCell = myXobjOrgSheet.Cells(myXlonFrstRow, myXlonFrstCol)
    
End Sub

'SnsP_シート上の指定範囲またはデータ全範囲のデータをVariant変数に取込む
Private Sub snsProc()
    myXbisExitFlag = False
    
    Call PfixGetSheetRangeDataVariant( _
            myXlonRowCnt, myXlonColCnt, myZvarShtData, _
            myXobjOrgSheet, myXobjFrstCell, myXobjLastCell)
    If myXlonRowCnt <= 0 Or myXlonColCnt <= 0 Then GoTo ExitPath
    
    Exit Sub
ExitPath:
    myXbisExitFlag = True
End Sub

'PrcsP_元データから必要なデータを抽出する
Private Sub prsProc()
    myXbisExitFlag = False
    
  Dim myZlonTmp(1) As Long, L As Long: L = LBound(myZlonTmp)
  Dim k As Long, i As Long, j As Long
  Dim myXstrOrgData As String, myXstrExtCode As String
    
    k = myXlonSrsDataCnt + L - 1
    j = myXlonColCnt + L - 1
    ReDim myZvarArngData(k, j) As Variant
    
    For k = LBound(myZstrSrsData) To UBound(myZstrSrsData)
        myXstrOrgData = myZstrSrsData(k)
        
        For i = LBound(myZvarShtData, 1) To UBound(myZvarShtData, 1)
            myXstrExtCode = myZvarShtData(i, L)
            
            If myXstrExtCode = myXstrOrgData Then
                myXlonArngDataCnt = myXlonArngDataCnt + 1
                For j = LBound(myZvarShtData, 2) To UBound(myZvarShtData, 2)
                    myZvarArngData(k, j) = myZvarShtData(i, j)
                Next j
            End If
            
        Next i
        
    Next k
    If myXlonArngDataCnt >= myXlonSrsDataCnt Then GoTo ExitPath
    
    Exit Sub
ExitPath:
    myXbisExitFlag = True
End Sub

'RecP_使用した変数をモジュールメモリに保存する
Private Sub recProc()
    myXbisExitFlag = False
    On Error GoTo ExitPath
    
  Dim myZvarM(1, 2) As Variant
    myZvarM(1, 1) = "meMlonExeNum"
    myZvarM(1, 2) = meMlonExeNum + 1

  Dim myXstrMdlName As String: myXstrMdlName = meMstrMdlName
    Call PfixChangeModuleConstValue(myXbisExitFlag, myXstrMdlName, myZvarM)
    
    On Error GoTo 0
    Exit Sub
ExitPath:
    myXbisExitFlag = True
End Sub

'===============================================================================================

'◆ClassProc名_シート上の連続するデータ範囲を取得する
Private Sub instCSeriesData()
  Dim Lc As Long
  Dim myZlonTmp(1) As Long, Lo As Long: Lo = LBound(myZlonTmp)
  Dim k As Long
  Dim myXinsSeriesData As CSeriesData: Set myXinsSeriesData = New CSeriesData
    With myXinsSeriesData
    '//クラス内変数への入力
        Set .setSrchSheet = myXobjExtSheet
        .letBgnRowCol(1) = myXlonBgnRow
        .letBgnRowCol(2) = myXlonBgnCol
        .letRowDrctn = True
    '//クラス内プロシージャの実行とクラス内変数からの出力
        .exeProc
        myXlonSrsDataCnt = .getSrsDataCnt
        If myXlonSrsDataCnt <= 0 Then GoTo JumpPath
        k = myXlonSrsDataCnt + Lo - 1
        ReDim myZstrSrsData(k) As String
        Lc = .getOptnBase
        For k = 1 To myXlonSrsDataCnt
            myZstrSrsData(k + Lo - 1) = .getSrsDataAry(k + Lc - 1)
        Next k
    End With
JumpPath:
    Set myXinsSeriesData = Nothing
End Sub

'◆ClassProc名_変数情報をエクセルシートに書き出す
Private Sub instCVrblToSht()
  Dim myXinsVrblToSht As CVrblToSht: Set myXinsVrblToSht = New CVrblToSht
    With myXinsVrblToSht
    '//クラス内変数への入力
        .letVrbl = myZvarArngData
        Set .setPstFrstCell = myXobjPstFrstCell
        .letInptBxOFF = False
        .letEachWrtON = False
    '//クラス内プロシージャの実行とクラス内変数からの出力
        myXbisExitFlag = Not .fncbisCmpltFlag
    End With
    Set myXinsVrblToSht = Nothing
End Sub

'===============================================================================================

 '定型Ｐ_シート上の指定範囲またはデータ全範囲のデータをVariant変数に取込む
Private Sub PfixGetSheetRangeDataVariant( _
            myXlonRowCnt As Long, myXlonColCnt As Long, myZvarShtData As Variant, _
            ByVal myXobjSheet As Object, _
            ByVal myXobjFrstCell As Object, ByVal myXobjLastCell As Object)
'myZvarShtData(i, j) : データ
    myXlonRowCnt = Empty: myXlonColCnt = Empty: myZvarShtData = Empty
    If myXobjSheet Is Nothing Then Exit Sub
'//シート上の指定範囲をオブジェクト配列に取込む
  Dim myXobjShtRng As Object
    If myXobjFrstCell Is Nothing Then Set myXobjFrstCell = myXobjSheet.Cells(1, 1)
    If myXobjLastCell Is Nothing Then _
        Set myXobjLastCell = myXobjSheet.Cells.SpecialCells(xlCellTypeLastCell)
    Set myXobjShtRng = myXobjSheet.Range(myXobjFrstCell, myXobjLastCell)
    myXlonRowCnt = myXobjShtRng.Rows.Count
    myXlonColCnt = myXobjShtRng.Columns.Count
    If myXlonRowCnt <= 0 Or myXlonColCnt <= 0 Then Exit Sub
'//オブジェクト配列からデータを取得
    myZvarShtData = myXobjShtRng.Value
    Set myXobjShtRng = Nothing
End Sub

 '定型Ｐ_モジュール内定数の値を変更する
Private Sub PfixChangeModuleConstValue(myXbisExitFlag As Boolean, _
            ByVal myXstrMdlName As String, ByRef myZvarM() As Variant)
    myXbisExitFlag = False
    If myXstrMdlName = "" Then GoTo ExitPath
  Dim L As Long, myXvarTmp As Variant
    On Error GoTo ExitPath
    L = LBound(myZvarM, 1): myXvarTmp = myZvarM(L, L)
    On Error GoTo 0
  Dim myXlonDclrLines As Long, myXobjCdMdl As Object
    Set myXobjCdMdl = ThisWorkbook.VBProject.VBComponents(myXstrMdlName).CodeModule
    myXlonDclrLines = myXobjCdMdl.CountOfDeclarationLines
    If myXlonDclrLines <= 0 Then GoTo ExitPath
  Dim i As Long, n As Long
  Dim myXstrTmp As String, myXstrSrch As String, myXstrOrg As String, myXstrRplc As String
Application.DisplayAlerts = False
    For i = 1 To myXlonDclrLines
        myXstrTmp = myXobjCdMdl.Lines(i, 1)
        For n = LBound(myZvarM, 1) To UBound(myZvarM, 1)
            myXstrSrch = "Const" & Space(1) & myZvarM(n, L) & Space(1) & "As" & Space(1)
            If InStr(myXstrTmp, myXstrSrch) > 0 Then
                myXstrOrg = Left(myXstrTmp, InStr(myXstrTmp, "=" & Space(1)) + 1)
                myXstrRplc = myXstrOrg & myZvarM(n, L + 1)
                Call myXobjCdMdl.ReplaceLine(i, myXstrRplc)
            End If
        Next n
    Next i
Application.DisplayAlerts = True
    Set myXobjCdMdl = Nothing
    Exit Sub
ExitPath:
    myXbisExitFlag = True
End Sub

'DummyＰ_
Private Sub MsubDummy()
End Sub

'===============================================================================================

'◆ModuleProc名_上場企業財務決算データを取り込む
Private Sub callxRefExtrctData()
  Dim myXbisCmpltFlag As Boolean
    Call xRefExtrctData.callProc(myXbisCmpltFlag)
End Sub
'
'  Public Const coXbisTestMode As Boolean = True
'  Public Const coXbisTestMode As Boolean = False
'
Private Sub resetConstantInxRefExtrctData()
'//xRefExtrctDataモジュールのモジュールメモリのリセット処理
    Call xRefExtrctData.resetConstant
End Sub
