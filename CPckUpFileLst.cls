VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "CPckUpFileLst"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'Includes PfixPickUpExistFileArray
'Includes PincPickUpBaseNameMatchFileArray
'Includes PfncbisCheckFileBaseName
'Includes PfixGetFolderFileStringInformationFor1DArray

Option Explicit
Option Base 1

'◆ClassProc名_ファイル一覧からベース名が指定条件と一致するファイルを抽出する
'Rev.001
  
'//モジュールメモリ
  Private Const meMstrMdlName As String = "CPckUpFileLst"
  
'//PropertyGet_出力データ
  Private Lc As Long
  Private myXlonFileCnt As Long, myZobjFile() As Object, _
            myZstrFileName() As String, myZstrFilePath() As String
  
'//PropertySetLet_入力制御信号
  Private myXbisNotOutFileInfo As Boolean
  
'//PropertySetLet_入力データ
  Private myZobjOrgFile() As Object, myZstrOrgFilePath() As String
  Private myZvarTrgtWrdPos() As Variant
  
'//モジュール内変数_制御信号
  Private myXbisExitFlag As Boolean
  
'//モジュール内変数_データ
  Private myXlonOrgFileCnt As Long, _
            myZobjOrgFileInt() As Object, myZstrOrgFilePathInt() As String
  Private myXstrBaseName As String, myXbisInStrOptn As Boolean, myXlonPosOptn As Long

'iniP_モジュール内変数を初期化する
Private Sub initializeModuleVariables()
    myXbisExitFlag = False
    
    myXlonOrgFileCnt = Empty: Erase myZobjOrgFileInt: Erase myZstrOrgFilePathInt
    myXstrBaseName = Empty: myXbisInStrOptn = Empty: myXlonPosOptn = Empty
End Sub

'-----------------------------------------------------------------------------------------------

Public Property Get getOptnBase() As Long
  Dim myZlonTmp(1) As Long, L As Long: L = LBound(myZlonTmp)
    getOptnBase = L
End Property

Public Property Get getFileCnt() As Long
    getFileCnt = myXlonFileCnt
End Property

Public Property Get getFileAry(ByVal k As Long) As Object
    Set getFileAry = myZobjFile(k)
'myZobjFile(k) : ファイルオブジェクト
End Property

Public Property Get getFileNameAry(ByVal k As Long) As String
    getFileNameAry = myZstrFileName(k)
'myZstrFileName(k) : ファイル名
End Property

Public Property Get getFilePathAry(ByVal k As Long) As String
    getFilePathAry = myZstrFilePath(k)
'myZstrFilePath(k) : ファイルパス
End Property

'iniP_出力変数を初期化する
Private Sub initializeOutputVariables()
    myXlonFileCnt = Empty
    Erase myZobjFile: Erase myZstrFileName: Erase myZstrFilePath
End Sub

'-----------------------------------------------------------------------------------------------

Public Property Let letNotOutFileInfo(ByVal RHS As Boolean)
    myXbisNotOutFileInfo = RHS
'myXbisNotOutFileInfo = False : ファイルオブジェクとファイル情報を両方出力する
'myXbisNotOutFileInfo = True  : ファイルオブジェクトのみ出力してファイル情報は出力しない
End Property

Public Property Let letOrgFileAry(ByRef RHS() As Object)
'myZobjOrgFile(i) : 元ファイルオブジェクト配列
    myZobjOrgFile = RHS
End Property

Public Property Let letOrgFilePathAry(ByRef RHS() As String)
'myZstrOrgFilePath(i) : 元ファイルパス配列
    myZstrOrgFilePath = RHS
End Property

Public Property Let letTrgtWrdPosAry(ByRef RHS() As Variant)
    myZvarTrgtWrdPos = RHS
'myZvarTrgtWrdPos(1)         : 指定文字列
'myZvarTrgtWrdPos(2) = False : 指定文字列と一致する条件
'myZvarTrgtWrdPos(2) = True  : 指定文字列を含む条件
'myZvarTrgtWrdPos(3) = 1     : 指定文字列をベースファイル名の先頭に含む
'myZvarTrgtWrdPos(3) = 2     : 指定文字列をベースファイル名の接尾に含む
'myZvarTrgtWrdPos(3) = 3     : 指定文字列をベースファイル名内に含む
End Property

'checkP_入力変数内容を確認する
Private Sub checkInputVariables1()
    
  Dim myXobjTmp As Object, L As Long
    On Error GoTo ExitPath
    L = LBound(myZobjOrgFile): Set myXobjTmp = myZobjOrgFile(L)
    On Error GoTo 0
    
  Dim i As Long, n As Long: n = 0
    For i = LBound(myZobjOrgFile) To UBound(myZobjOrgFile)
        If myZobjOrgFile(i) Is Nothing Then GoTo NextPath
        n = n + 1: ReDim Preserve myZobjOrgFileInt(n) As Object
        Set myZobjOrgFileInt(n) = myZobjOrgFile(i)
NextPath:
    Next i
    myXlonOrgFileCnt = n
    
ExitPath:
End Sub

'checkP_入力変数内容を確認する
Private Sub checkInputVariables2()
    myXbisExitFlag = False
    
    If myXlonOrgFileCnt > 0 Then Exit Sub
    
  Dim myXstrTmp As String, L As Long
    On Error GoTo ExitPath
    L = LBound(myZstrOrgFilePath): myXstrTmp = myZstrOrgFilePath(L)
    On Error GoTo 0
    
'//ファイルパス一覧から存在するファイルを抽出
  Dim i As Long
    i = UBound(myZstrOrgFilePath) - LBound(myZstrOrgFilePath) + 1
    ReDim myZstrOrgFilePathInt(i) As String
    For i = LBound(myZstrOrgFilePath) To UBound(myZstrOrgFilePath)
        myZstrOrgFilePathInt(i + (1 - L)) = myZstrOrgFilePath(i)
    Next i
    Call PfixPickUpExistFileArray(myXlonOrgFileCnt, myZobjOrgFileInt, myZstrOrgFilePathInt)
    If myXlonOrgFileCnt <= 0 Then GoTo ExitPath
    
    Exit Sub
ExitPath:
    myXbisExitFlag = True
End Sub

'checkP_入力変数内容を確認する
Private Sub checkInputVariables3()
    myXbisExitFlag = False
    
  Dim L As Long, U As Long, n As Long
    On Error GoTo ExitPath
    L = LBound(myZvarTrgtWrdPos): U = UBound(myZvarTrgtWrdPos)
    n = U - L + 1: If n <> 3 Then GoTo ExitPath
    myXstrBaseName = CStr(myZvarTrgtWrdPos(L + 0))
    myXbisInStrOptn = CBool(myZvarTrgtWrdPos(L + 1))
    myXlonPosOptn = CLng(myZvarTrgtWrdPos(L + 2))
    On Error GoTo 0
    
    Exit Sub
ExitPath:
    myXbisExitFlag = True
End Sub

'-----------------------------------------------------------------------------------------------

'PublicP_
Public Sub exeProc()
    Call ctrProc
End Sub

'CtrlP_
Private Sub ctrProc()
    Call initializeOutputVariables
    Call initializeModuleVariables
    Call checkInputVariables1
    Call checkInputVariables2: If myXbisExitFlag = True Then GoTo ExitPath
    Call checkInputVariables3: If myXbisExitFlag = True Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "1"     'PassFlag
    
'//ファイル一覧からベース名が指定ファイル名と一致するファイルを抽出
    Call PincPickUpBaseNameMatchFileArray( _
            myXlonFileCnt, myZobjFile, _
            myZobjOrgFileInt, myXstrBaseName, myXbisInStrOptn, myXlonPosOptn)
    If myXlonFileCnt <= 0 Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "2"     'PassFlag
    
'//ファイル情報取得
    Call prsProc
    If myXbisExitFlag = True Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "3"     'PassFlag
    
ExitPath:
    Call initializeModuleVariables
End Sub

'PrcsP_ファイル情報取得
Private Sub prsProc()
    myXbisExitFlag = False
    
    If myXbisNotOutFileInfo = True Then Exit Sub
    
'//ファイル一覧のファイル名を取得
  Dim myXlonInfoCnt As Long
    Call PfixGetFolderFileStringInformationFor1DArray( _
            myXlonInfoCnt, myZstrFileName, _
            myZobjFile, 1)
    If myXlonInfoCnt <= 0 Then GoTo ExitPath
    
'//ファイル一覧のファイルパスを取得
    Call PfixGetFolderFileStringInformationFor1DArray( _
            myXlonInfoCnt, myZstrFilePath, _
            myZobjFile, 2)
    If myXlonInfoCnt <= 0 Then GoTo ExitPath
    
    Exit Sub
ExitPath:
    myXbisExitFlag = True
End Sub

'===============================================================================================

 '定型Ｐ_ファイルパス一覧から存在するファイルを抽出する
Private Sub PfixPickUpExistFileArray( _
            myXlonExistFileCnt As Long, myZobjExistFile() As Object, _
            ByRef myZstrOrgFilePath() As String)
'myZobjExistFile(i) : 抽出ファイル
'myZstrOrgFilePath(i) : 元ファイルパス
    myXlonExistFileCnt = Empty: Erase myZobjExistFile
  Dim myXstrTmp As String, Li As Long
    On Error GoTo ExitPath
    Li = LBound(myZstrOrgFilePath): myXstrTmp = myZstrOrgFilePath(Li)
    On Error GoTo 0
  Dim myXobjFSO As Object: Set myXobjFSO = CreateObject("Scripting.FileSystemObject")
  Dim myZlonTmp(1) As Long, Lo As Long: Lo = LBound(myZlonTmp)
  Dim myXvarPath As Variant, myXbisExistChck As Boolean, n As Long: n = Lo - 1
    For Each myXvarPath In myZstrOrgFilePath
        myXbisExistChck = myXobjFSO.FileExists(myXvarPath)
        If myXbisExistChck = False Then GoTo NextPath
        n = n + 1: ReDim Preserve myZobjExistFile(n) As Object
        Set myZobjExistFile(n) = myXobjFSO.GetFile(myXvarPath)
NextPath:
    Next myXvarPath
    myXlonExistFileCnt = n - Lo + 1
    Set myXobjFSO = Nothing
ExitPath:
End Sub

 '定型Ｐ_ファイル一覧からベース名が指定ファイル名と一致するファイルを抽出する
Private Sub PincPickUpBaseNameMatchFileArray( _
            myXlonBsMtchFileCnt As Long, myZobjBsMtchFile() As Object, _
            ByRef myZobjOrgFile() As Object, ByVal myXstrBaseName As String, _
            Optional ByVal coXbisInStrOptn As Boolean = False, _
            Optional ByVal coXlonPosOptn As Long = 3)
'Includes PfncbisCheckFileBaseName
'myZobjBsMtchFile(i) : 抽出ファイル
'myZobjOrgFile(i) : 元ファイル
'coXbisInStrOptn = False : 指定文字列と一致する条件
'coXbisInStrOptn = True  : 指定文字列を含む条件
'coXlonPosOptn = 1 : 指定文字列をベースファイル名の先頭に含む
'coXlonPosOptn = 2 : 指定文字列をベースファイル名の接尾に含む
'coXlonPosOptn = 3 : 指定文字列をベースファイル名内に含む
    myXlonBsMtchFileCnt = Empty: Erase myZobjBsMtchFile
  Dim myXobjTmp As Object, Li As Long
    On Error GoTo ExitPath
    Li = LBound(myZobjOrgFile): Set myXobjTmp = myZobjOrgFile(Li)
    On Error GoTo 0
  Dim myZlonTmp(1) As Long, Lo As Long: Lo = LBound(myZlonTmp)
  Dim i As Long, myXobjFile As Object, myXstrFilePath As String
  Dim myXbisBsChck As Boolean, n As Long: n = Lo - 1
    For i = LBound(myZobjOrgFile) To UBound(myZobjOrgFile)
        Set myXobjFile = myZobjOrgFile(i)
        myXstrFilePath = myXobjFile.Path
        myXbisBsChck = PfncbisCheckFileBaseName( _
                        myXstrFilePath, myXstrBaseName, coXbisInStrOptn, coXlonPosOptn)
        If myXbisBsChck = True Then
            n = n + 1: ReDim Preserve myZobjBsMtchFile(n) As Object
            Set myZobjBsMtchFile(n) = myXobjFile
        End If
    Next i
    myXlonBsMtchFileCnt = n - Lo + 1
    Set myXobjFile = Nothing
ExitPath:
End Sub

 '定型Ｆ_指定ファイルが指定ベース名と一致することを確認する
Private Function PfncbisCheckFileBaseName( _
            ByVal myXstrFilePath As String, ByVal myXstrBaseName As String, _
            Optional ByVal coXbisInStrOptn As Boolean = False, _
            Optional ByVal coXlonPosOptn As Long = 3) As Boolean
'coXbisInStrOptn = False : 指定文字列と一致する条件
'coXbisInStrOptn = True  : 指定文字列を含む条件
'coXlonPosOptn = 1 : 指定文字列をベースファイル名の先頭に含む
'coXlonPosOptn = 2 : 指定文字列をベースファイル名の接尾に含む
'coXlonPosOptn = 3 : 指定文字列をベースファイル名内に含む
    PfncbisCheckFileBaseName = False
    If myXstrFilePath = "" Then Exit Function
    If myXstrBaseName = "" Then GoTo JumpPath
  Dim myXobjFSO As Object: Set myXobjFSO = CreateObject("Scripting.FileSystemObject")
  Dim myXbisFileExist As Boolean, myXstrOrgBaseName As String
    With myXobjFSO
        myXbisFileExist = .FileExists(myXstrFilePath)
        If myXbisFileExist = False Then Exit Function
        myXstrOrgBaseName = .getBaseName(myXstrFilePath)
    End With
    Set myXobjFSO = Nothing
    Select Case coXbisInStrOptn
        Case True
            Select Case coXlonPosOptn
                Case 1
                    If Left(myXstrOrgBaseName, Len(myXstrBaseName)) _
                        <> myXstrBaseName Then Exit Function
                Case 2
                    If Right(myXstrOrgBaseName, Len(myXstrBaseName)) _
                        <> myXstrBaseName Then Exit Function
                Case 3
                    If InStr(myXstrOrgBaseName, myXstrBaseName) = 0 Then Exit Function
                Case Else: Exit Function
            End Select
        Case Else: If myXstrOrgBaseName <> myXstrBaseName Then Exit Function
    End Select
JumpPath:
    PfncbisCheckFileBaseName = True
End Function

 '定型Ｐ_1次元配列のフォルダファイルオブジェクト一覧の文字列情報を取得する
Private Sub PfixGetFolderFileStringInformationFor1DArray( _
                myXlonInfoCnt As Long, myZstrInfo() As String, _
                ByRef myZobjFldrFile() As Object, _
                Optional ByVal coXlonStrOptn As Long = 1)
'myZstrInfo(i) : 抽出フォルダ情報
'myZobjFldrFile(i) : 元フォルダor元ファイル
'coXlonStrOptn = 1  : 名前 (Name)
'coXlonStrOptn = 2  : パス (Path)
'coXlonStrOptn = 3  : 親フォルダ (ParentFolder)
'coXlonStrOptn = 4  : 属性 (Attributes)
'coXlonStrOptn = 5  : 種類 (Type)
    myXlonInfoCnt = Empty: Erase myZstrInfo
  Dim myXobjTmp As Object, L As Long
    On Error GoTo ExitPath
    L = LBound(myZobjFldrFile): Set myXobjTmp = myZobjFldrFile(L)
    On Error GoTo 0
    myXlonInfoCnt = UBound(myZobjFldrFile) - LBound(myZobjFldrFile) + 1
  Dim i As Long: i = myXlonInfoCnt - (1 - L)
    ReDim myZstrInfo(i) As String
    For i = LBound(myZobjFldrFile) To UBound(myZobjFldrFile)
        If myZobjFldrFile(i) Is Nothing Then GoTo NextPath
        Select Case coXlonStrOptn
            Case 1: myZstrInfo(i) = myZobjFldrFile(i).Name
            Case 2: myZstrInfo(i) = myZobjFldrFile(i).Path
            Case 3: myZstrInfo(i) = myZobjFldrFile(i).ParentFolder
            Case 4: myZstrInfo(i) = myZobjFldrFile(i).Attributes
            Case 5: myZstrInfo(i) = myZobjFldrFile(i).Type
        End Select
NextPath:
    Next i
ExitPath:
End Sub

'DummyＰ_
Private Sub CsubDummy()
End Sub

'===============================================================================================

''◆ClassProc名_ファイル一覧からベース名が指定条件と一致するファイルを抽出する
'Private Sub instCPckUpFileLst()
'  Dim Lc As Long
'  Dim myXlonFileCnt As Long, myZobjFile() As Object, _
'        myZstrFileName() As String, myZstrFilePath() As String
'    'myZobjFile(k) : ファイルオブジェクト
'    'myZstrFileName(k) : ファイル名
'    'myZstrFilePath(k) : ファイルパス
''//クラス内変数への入力
'  Dim myXbisNotOutFileInfo As Boolean
'    'myXbisNotOutFileInfo = False : ファイルオブジェクとファイル情報を両方出力する
'    'myXbisNotOutFileInfo = True  : ファイルオブジェクトのみ出力してファイル情報は出力しない
'    myXbisNotOutFileInfo = False
'  Dim myZobjOrgFile() As Object, myZstrOrgFilePath() As String
'    'myZobjOrgFile(i) : 元ファイルオブジェクト配列
'    'myZstrOrgFilePath(i) : 元ファイルパス配列
'  Dim myXlonOrgFileCnt As Long
'    myXlonOrgFileCnt = 2
'    ReDim myZstrOrgFilePath(myXlonOrgFileCnt) As String
'    myZstrOrgFilePath(1) = "C:\Users\Hiroki\Documents\_VBA4XPC\11 プログラムデータベース\02_VBAモジュール\mdl01_マクロ作成サポート" & "\" & _
'                            "cls02a_VBE内の情報操作.xlsm"
'    myZstrOrgFilePath(2) = "C:\Users\Hiroki\Documents\_VBA4XPC\11 プログラムデータベース\02_VBAモジュール\mdl01_マクロ作成サポート" & "\" & _
'                            "cls02b_エクセルブック内の個別プロシージャを取得.xlsm"
'  Dim myZvarTrgtWrdPos() As Variant
'    ReDim myZvarTrgtWrdPos(3) As Variant
'    myZvarTrgtWrdPos(1) = "cls02a"
'    myZvarTrgtWrdPos(2) = True
'    myZvarTrgtWrdPos(3) = 1
''//CPckUpFileLstクラスモジュールのインスタンス生成
'  Dim myZlonTmp(1) As Long, Lo As Long: Lo = LBound(myZlonTmp)
'  Dim k As Long
'  Dim myXinsPckUpFileLst As CPckUpFileLst: Set myXinsPckUpFileLst = New CPckUpFileLst
'    With myXinsPckUpFileLst
'    '//クラス内変数への入力
'        .letNotOutFileInfo = myXbisNotOutFileInfo
'        .letOrgFileAry = myZobjOrgFile
'        .letOrgFilePathAry = myZstrOrgFilePath
'        .letTrgtWrdPosAry = myZvarTrgtWrdPos
'    '//クラス内プロシージャの実行とクラス内変数からの出力
'        .exeProc
'        myXlonFileCnt = .getFileCnt
'        If myXlonFileCnt <= 0 Then GoTo JumpPath
'        k = myXlonFileCnt + Lo - 1
'        ReDim myZobjFile(k) As Object
'        ReDim myZstrFileName(k) As String
'        ReDim myZstrFilePath(k) As String
'        Lc = .getOptnBase
'        For k = 1 To myXlonFileCnt
'            Set myZobjFile(k + Lo - 1) = .getFileAry(k + Lc - 1)
'            myZstrFileName(k + Lo - 1) = .getFileNameAry(k + Lc - 1)
'            myZstrFilePath(k + Lo - 1) = .getFilePathAry(k + Lc - 1)
'        Next k
'    End With
'JumpPath:
'    Set myXinsPckUpFileLst = Nothing
'    Call variablesOfCPckUpFileLst(myXlonFileCnt, myZstrFileName)  'Debug.Print
'ExitPath:
'End Sub
'Private Sub variablesOfCPckUpFileLst( _
'            ByVal myXlonDataCnt As Long, ByRef myZvarField As Variant)
''//CPckUpFileLstクラス内から出力した変数の内容確認
'    Debug.Print "データ数: " & myXlonDataCnt
'    If myXlonDataCnt <= 0 Then Exit Sub
'  Dim k As Long
'    For k = LBound(myZvarField) To UBound(myZvarField)
'        Debug.Print "データ" & k & ": " & myZvarField(k)
'    Next k
'End Sub
