VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "CExplrAdrs"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'Includes PfnclonGetExcelApplicationWindowHandle
'Includes apiPfixGetForegroundWindow
'Includes apiPfixFindWindow
'Includes PincSetForegroundWindowWithIconicCheck1
'Includes apiPfncbisIsIconic2
'Includes apiPfixShowWindowAsync2
'Includes apiPfixSetForegroundWindow2
'Includes apiPfncGetWindowTextLength
'Includes apiPfncGetWindowText
'Includes PfncPseudoInStrRev
'Includes PfnclonMsgBoxOKCancel
'Includes PfncstrExplorerAddressBar
'Includes PfixWait
'Includes PfncbisCheckFolderExist

Option Explicit
Option Base 1

'◆ClassProc名_起動中の最前面のエクスプローラのアドレスバーを取得する
'Rev.005

'API宣言_操作中のウインドウのハンドルを取得する
  Private Declare PtrSafe Function GetForegroundWindow Lib "USER32" () As Long

'API宣言_指定ウインドウクラス名とウインドウ名を持つウインドウのハンドルを取得する
  Private Declare PtrSafe Function FindWindow Lib "user32.dll" Alias "FindWindowA" ( _
        ByVal lpClassName As String, ByVal lpWindowName As String) As Long
  
'API宣言_ウインドウタイトルバーの文字列の長さを取得する
  Private Declare PtrSafe Function GetWindowTextLength Lib "USER32" Alias "GetWindowTextLengthA" ( _
        ByVal hWnd As Long) As Long
  
'API宣言_ウインドウのタイトルバーの文字列を取得する
  Private Declare PtrSafe Function GetWindowText Lib "USER32" Alias "GetWindowTextA" ( _
        ByVal hWnd&, ByVal lpString$, ByVal cch&) As Long
  
'API宣言_ウインドウがアイコン化されているか判別する
  Private Declare PtrSafe Function IsIconic Lib "USER32" (ByVal hWnd As Long) As Long

'API宣言_指定されたウインドウの表示状態を設定する
  Private Declare PtrSafe Function ShowWindowAsync Lib "user32.dll" ( _
        ByVal hWnd As Long, ByVal nCmdShow As Long) As Long

'API宣言_指定したウィンドウを最前面に表示する
  Private Declare PtrSafe Function SetForegroundWindow Lib "USER32" ( _
        ByVal hWnd As Long) As Long

'//モジュールメモリ
  Private Const meMstrMdlName As String = "CExplrAdrs"

'//PropertyGet_出力データ
  Private myXstrExplrAdrs As String
  
'//PropertySetLet_入力制御信号
  Private myXbisMsgOptn As Boolean
  
'//モジュール内変数_制御信号
  Private myXbisExitFlag As Boolean
  
'//モジュール内変数
  Private myXlonExplhWnd As Long, myXlonExcelhWnd As Long

'iniP_モジュール内変数を初期化する
Private Sub initializeModuleVariables()
    myXbisExitFlag = False
    
    myXlonExplhWnd = Empty: myXlonExcelhWnd = Empty
End Sub

'-----------------------------------------------------------------------------------------------

Public Property Get getExplrAdrs() As String
    getExplrAdrs = myXstrExplrAdrs
End Property

'iniP_出力変数を初期化する
Private Sub initializeOutputVariables()
    myXstrExplrAdrs = Empty
End Sub

'-----------------------------------------------------------------------------------------------

Public Property Let letMsgOptn(ByVal RHS As Boolean)
    myXbisMsgOptn = RHS
'myXbisMsgOptn = True  : ウィンド選択の確認メッセージを表示する
'myXbisMsgOptn = False : ウィンド選択の確認メッセージを表示しない
End Property

'-----------------------------------------------------------------------------------------------

'PublicF_
Public Function fncstrExplorerAddress() As String
    fncstrExplorerAddress = Empty
    Call ctrProc
    fncstrExplorerAddress = myXstrExplrAdrs
End Function

'CtrlP_
Private Sub ctrProc()
    Call initializeOutputVariables
    Call initializeModuleVariables
'    Debug.Print "PassFlag: " & meMstrMdlName & "1"  'PassFlag
    
'//S:起動中の全エクスプローラで最前面のウィンドウを選択
    Call snsGetExplrhWnd
    If myXbisExitFlag = True Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "2"  'PassFlag
    
'//S:選択したエクスプローラウィンドウを全ウィンドで最前面表示してアドレスバーを取得
    Call snsGetAddressBarOfExplorer
    If myXbisExitFlag = True Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "3"  'PassFlag
    
'//指定フォルダの存在を確認
    If PfncbisCheckFolderExist(myXstrExplrAdrs) = False Then
        myXstrExplrAdrs = ""
        myXbisExitFlag = True
        GoTo ExitPath
    End If
'    Debug.Print "PassFlag: " & meMstrMdlName & "4"  'PassFlag

ExitPath:
    Call initializeModuleVariables
End Sub

'SnsP_起動中の全エクスプローラで最前面のウィンドウを選択
Private Sub snsGetExplrhWnd()
    myXbisExitFlag = False
    
'//Excelの最上位のウィンドウハンドルを取得する
    myXlonExcelhWnd = PfnclonGetExcelApplicationWindowHandle

''//操作中のウインドウのハンドルを取得
'    Call apiPfixGetForegroundWindow(myXbisExitFlag, myXlonExcelhWnd)
'    If myXbisExitFlag = True Then Exit Sub

'    Debug.Print "PassFlag: " & meMstrMdlName & "1-1"    'PassFlag

'//指定ウインドウクラス名とウインドウ名を持つウインドウのハンドルを取得
  Dim myXstrClsName As String, myXstrWndwName As String
    myXstrClsName = "CabinetWClass"
    myXstrWndwName = vbNullString
    Call apiPfixFindWindow(myXbisExitFlag, myXlonExplhWnd, _
                            myXstrClsName, myXstrWndwName)
    If myXbisExitFlag = True Then GoTo ExitPath
    
    Exit Sub
ExitPath:
    myXbisExitFlag = True
End Sub

'PrcsP_選択したエクスプローラウィンドウを全ウィンドで最前面表示してアドレスバーを取得
Private Sub snsGetAddressBarOfExplorer()
    myXbisExitFlag = False
 
    If myXlonExplhWnd = 0 Then GoTo ExitPath

'//指定したウィンドウを最前面に表示(最小化チェック含む)
    Call PincSetForegroundWindowWithIconicCheck1(myXbisExitFlag, myXlonExplhWnd)
    If myXbisExitFlag = True Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "2-1"    'PassFlag

'//ウインドウタイトルバーの文字列の長さを取得
  Dim myXlonLenWndwTtl As Long
    myXlonLenWndwTtl = apiPfncGetWindowTextLength(myXlonExplhWnd)
'    Debug.Print "PassFlag: " & meMstrMdlName & "2-2"    'PassFlag

'//ウインドウのタイトルバーの文字列を取得
  Dim myXstrWndwTtlName As String
    myXstrWndwTtlName = apiPfncGetWindowText(myXlonExplhWnd, myXlonLenWndwTtl + 1)
    If myXstrWndwTtlName = "" Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "2-3"    'PassFlag
    
    Call PfixWait(0.1)
    Call PincSetForegroundWindowWithIconicCheck1(myXbisExitFlag, myXlonExcelhWnd)
    Call PfixWait(0.1)
'    Debug.Print "PassFlag: " & meMstrMdlName & "2-4"    'PassFlag

'//文字列から親フォルダ名を抽出
  Dim myXlonPstn As Long
    myXlonPstn = PfncPseudoInStrRev(myXstrWndwTtlName, "\")
    If myXlonPstn > 1 Then _
        myXstrWndwTtlName = Mid(myXstrWndwTtlName, myXlonPstn)
'    Debug.Print "PassFlag: " & meMstrMdlName & "2-5"    'PassFlag

'//選択ウィンドが正しいかどうか確認
    If myXbisMsgOptn = False Then GoTo JumpPath
  Dim myXstrPrompt As String, myXstrTitle As String
    myXstrTitle = "選択ウィンドの確認"
    myXstrPrompt = "[ " & myXstrWndwTtlName & " ]" & vbCrLf _
        & vbCrLf _
        & "このタイトルのエクスプローラのアドレスバーのアドレスを取得します。" & vbCrLf _
        & vbCrLf _
        & "エクスプローラの選択が違う場合には キャンセル をクリックして、" & vbCrLf _
        & "所望のエクスプローラを全エクスプローラ内で最前面に表示してから、" & vbCrLf _
        & "再度プログラムを実行して下さい。"
  Dim myXlonMsgBox As Long
    myXlonMsgBox = PfnclonMsgBoxOKCancel(myXstrTitle, myXstrPrompt)
    If myXlonMsgBox = vbCancel Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "2-6"    'PassFlag
    
JumpPath:
'//指定したウィンドウを最前面に表示する(最小化チェック含む)
    Call PincSetForegroundWindowWithIconicCheck1(myXbisExitFlag, myXlonExplhWnd)
    If myXbisExitFlag = True Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "2-7"    'PassFlag
    
'//起動中でアクティブ状態のエクスプローラのアドレスを取得する
    myXstrExplrAdrs = PfncstrExplorerAddressBar(0.1)
    
    If myXstrExplrAdrs = "" Then GoTo ExitPath
'    Debug.Print "PassFlag: " & meMstrMdlName & "2-8"    'PassFlag
    
'//指定したウィンドウを最前面に表示する(最小化チェック含む)
    Call PincSetForegroundWindowWithIconicCheck1(myXbisExitFlag, myXlonExcelhWnd)
    
    Exit Sub
ExitPath:
    myXbisExitFlag = True
End Sub

'===============================================================================================

 '定型Ｆ_Excelの最上位のウィンドウハンドルを取得する
Private Function PfnclonGetExcelApplicationWindowHandle() As Long
   PfnclonGetExcelApplicationWindowHandle = Empty
  Dim myXlonhWnd As Long
   myXlonhWnd = Excel.Application.hWnd
   PfnclonGetExcelApplicationWindowHandle = myXlonhWnd
End Function
 
 '定型Ｐ_[API]操作中のウインドウのハンドルを取得する
Private Sub apiPfixGetForegroundWindow(myXbisExitFlag As Boolean, myXlonhWnd As Long)
'→Declaration0:モジュールの宣言部分に記述
''API宣言_操作中のウインドウのハンドルを取得する
'  Private Declare PtrSafe Function GetForegroundWindow Lib "USER32" () As Long
'←EndDeclaration
'myXlonRet = GetForegroundWindow():ハンドル
    myXbisExitFlag = False: myXlonhWnd = Empty
    myXlonhWnd = GetForegroundWindow
    If myXlonhWnd = 0 Then GoTo ExitPath
    Exit Sub
ExitPath:
    myXbisExitFlag = True
'    MsgBox "ウインドウハンドルの取得に失敗"     'Debug.Print
End Sub

 '定型Ｐ_[API]指定ウインドウクラス名とウインドウ名を持つウインドウのハンドルを取得する
Private Sub apiPfixFindWindow(myXbisExitFlag As Boolean, myXlonhWnd As Long, _
            Optional ByVal coXstrClsName As String = "XLMAIN", _
            Optional ByVal coXstrWndwName As String = vbNullString)
'→Declaration0:モジュールの宣言部分に記述
''API宣言_指定ウインドウクラス名とウインドウ名を持つウインドウのハンドルを取得する
'  Private Declare PtrSafe Function FindWindow Lib "user32.dll" Alias "FindWindowA" ( _
'        ByVal lpClassName As String, ByVal lpWindowName As String) As Long
'←EndDeclaration
'myXlonRet = FindWindow(ウインドウクラス名, ウインドウ名):正常終了は0以外
'◇coXstrClsName : クラス名
'coXstrClsName = "XLMAIN"               ': Excel
'coXstrClsName = "OpusApp"              ': Word
'coXstrClsName = "PP10FrameClass"       ': PowerPoint
'coXstrClsName = "Omain"                ': Access
'coXstrClsName = "IEFrame"              ': Internet Explorer
'coXstrClsName = "wndclass_desked_gsk"  ': Visual Basic Editor
'coXstrClsName = "CabinetWClass"        ': エクスプローラ
'coXstrClsName = "ExploreWClass"        ': エクスプローラ
'coXstrClsName = "Notepad"              ': メモ帳
'coXstrClsName = "SciCalc"              ': 電卓
'coXstrClsName = "CalcFrame"            ': 電卓
'coXstrClsName = "MSPaintApp"           ': ペイント
'coXstrClsName = "WordPadClass"         ': ワードパット
'coXstrClsName = vbNullString           ': 全ウィンドウ
'◇coXstrWndwName : ウィンドウ名
'coXstrWndwName = vbNullString          ': 全ウィンドウ
'※coXstrClsName = vbNullString And coXstrWndwName = vbNullString の場合は最前面のWindowハンドルを取得
    myXbisExitFlag = False: myXlonhWnd = Empty
    myXlonhWnd = FindWindow(coXstrClsName, coXstrWndwName)
    If myXlonhWnd = 0 Then GoTo ExitPath
    Exit Sub
ExitPath:
    myXbisExitFlag = True
'    MsgBox "ウインドウハンドルの取得に失敗"     'Debug.Print
End Sub

 '定型Ｐ_指定ウィンドウを最前面に表示する1(最小化チェック含む)
Private Sub PincSetForegroundWindowWithIconicCheck1(myXbisExitFlag As Boolean, _
            ByVal myXlonhWnd As Long)
'Includes apiPfncbisIsIconic1
'Includes apiPfixShowWindowAsync1
'Includes apiPfixSetForegroundWindow1
    myXbisExitFlag = False
    If myXlonhWnd = 0 Then GoTo ExitPath
  Const coXlonCmdShow As Long = &H9
'//ウインドウがアイコン化されているか判別
    myXbisExitFlag = apiPfncbisIsIconic1(myXlonhWnd)
    If myXbisExitFlag = True Then _
    '//ウインドウの最小化表示を元に戻す
        Call apiPfixShowWindowAsync1(myXbisExitFlag, myXlonhWnd, coXlonCmdShow)
        If myXbisExitFlag = True Then GoTo ExitPath
    End If
'//指定したウィンドウを最前面に表示
    Call apiPfixSetForegroundWindow1(myXbisExitFlag, myXlonhWnd)
    If myXbisExitFlag = True Then GoTo ExitPath
    Exit Sub
ExitPath:
    myXbisExitFlag = True
'    MsgBox "ウインドウの最前面化が失敗"     'Debug.Print
End Sub

 '定型Ｆ_[API]ウインドウがアイコン化されているか判別する1
Private Function apiPfncbisIsIconic1(ByVal myXlonhWnd As Long) As Boolean
'→Declaration0:モジュールの宣言部分に記述
''API宣言_ウインドウがアイコン化されているか判別する
'  Private Declare PtrSafe Function IsIconic Lib "USER32" (ByVal hWnd As Long) As Long
'←EndDeclaration
'myXlonRet = IsIconic(ウィンドウのハンドル):最小化されている時=1
    apiPfncbisIsIconic1 = False
    If myXlonhWnd = 0 Then Exit Function
  Dim myXlonRet As Long: myXlonRet = IsIconic(myXlonhWnd)
    If myXlonRet <> 1 Then Exit Function
    apiPfncbisIsIconic1 = True
'    MsgBox "ウインドウは最小化状態"     'Debug.Print
End Function

 '定型Ｐ_[API]ウインドウの表示状態を設定する1
Private Sub apiPfixShowWindowAsync1(myXbisExitFlag As Boolean, _
            ByVal myXlonhWnd As Long, _
            Optional ByVal coXlonCmdShow As Long = 1)
'→Declaration0:モジュールの宣言部分に記述
''API宣言_指定されたウインドウの表示状態を設定する
'  Private Declare PtrSafe Function ShowWindowAsync Lib "user32.dll" ( _
'        ByVal hWnd As Long, ByVal nCmdShow As Long) As Long
'←EndDeclaration
'myXlonRet = ShowWindowAsync(ウインドウのハンドル,ウィンドウの表示方法):正常終了0以外
'coXlonCmdShow = 0 '=&H0 : SW_HIDE            :ウィンドウを非表示にして他のウィンドウをアクティブ
'coXlonCmdShow = 1 '=&H1 : SW_SHOWNORMAL      :ウインドウをアクティブにして元のサイズと位置で表示
'coXlonCmdShow = 2 '=&H2 : SW_SHOWMINIMIZED   :ウインドウをアクティブにして最小化
'coXlonCmdShow = 3 '=&H3 : SW_SHOWMAXIMIZED   :ウインドウをアクティブにして最大化
'coXlonCmdShow = 4 '=&H4 : SW_SHOWNOACTIVATE  :ウインドウをアクティブにせずに元のサイズと位置で表示
'coXlonCmdShow = 5 '=&H5 : SW_SHOW            :ウインドウをアクティブにして現在のサイズと位置で表示
'coXlonCmdShow = 6 '=&H6 : SW_MINIMIZE        :ウインドウを最小化しZオーダーが次のトップレベルウインドウをアクティブにする
'coXlonCmdShow = 7 '=&H7 : SW_SHOWMINNOACTIVE :ウインドウをアクティブにせずに最小化
'coXlonCmdShow = 8 '=&H8 : SW_SHOWNA          :ウインドウをアクティブにせずに現在のサイズと位置で表示
'coXlonCmdShow = 9 '=&H9 : SW_RESTORE         :ウインドウをアクティブにして表示し最小化または最大化の場合は位置とサイズを元に戻す
    myXbisExitFlag = False
    If myXlonhWnd = 0 Then GoTo ExitPath
  Dim myXlonRet As Long: myXlonRet = ShowWindowAsync(myXlonhWnd, coXlonCmdShow)
    If myXlonRet = 0 Then GoTo ExitPath
    Exit Sub
ExitPath:
    myXbisExitFlag = True
'    MsgBox "ウインドウの表示設定に失敗"     'Debug.Print
End Sub

 '定型Ｐ_[API]ウィンドウを最前面に表示する1
Private Sub apiPfixSetForegroundWindow1(myXbisExitFlag As Boolean, _
            ByVal myXlonhWnd As Long)
'→Declaration0:モジュールの宣言部分に記述
''API宣言_指定したウィンドウを最前面に表示する
'  Private Declare PtrSafe Function SetForegroundWindow Lib "USER32" ( _
'        ByVal hWnd As Long) As Long
'←EndDeclaration
'myXlonRet = SetForegroundWindow(ウインドウのハンドル):正常終了0以外
    myXbisExitFlag = False
    If myXlonhWnd = 0 Then GoTo ExitPath
  Dim myXlonRet As Long: myXlonRet = SetForegroundWindow(myXlonhWnd)
    If myXlonRet = 0 Then GoTo ExitPath
    Exit Sub
ExitPath:
    myXbisExitFlag = True
'    MsgBox "ウインドウの最前面化が失敗"     'Debug.Print
End Sub

 '定型Ｆ_[API]ウインドウタイトルバーの文字列の長さを取得する
Private Function apiPfncGetWindowTextLength(ByVal myXlonhWnd As Long) As Long
'→Declaration0:モジュールの宣言部分に記述
''API宣言_ウインドウタイトルバーの文字列の長さを取得する
'  Private Declare PtrSafe Function GetWindowTextLength Lib "USER32" Alias "GetWindowTextLengthA" ( _
'        ByVal hWnd As Long) As Long
'←EndDeclaration
'myXlonRet = GetWindowTextLength(ウィンドウのハンドル):文字列の文字数
    apiPfncGetWindowTextLength = Empty
    If myXlonhWnd = 0 Then GoTo ExitPath
  Dim myXTxtLngth As Long
    myXTxtLngth = GetWindowTextLength(myXlonhWnd)
    If myXTxtLngth = 0 Then GoTo ExitPath
    apiPfncGetWindowTextLength = myXTxtLngth
    Exit Function
ExitPath:
'    MsgBox "タイトルバーの文字数取得無し"   'Debug.Print
End Function
  
 '定型Ｆ_[API]ウインドウのタイトルバーの文字列を取得する
Private Function apiPfncGetWindowText(myXlonhWnd As Long, _
            Optional ByVal coXlonBuf As Long = 255) As String
'→Declaration0:モジュールの宣言部分に記述
''API宣言_ウインドウのタイトルバーの文字列を取得する
'  Private Declare PtrSafe Function GetWindowText Lib "USER32" Alias "GetWindowTextA" ( _
'        ByVal hWnd&, ByVal lpString$, ByVal cch&) As Long
'←EndDeclaration
'myXlonRet = GetWindowText(ウィンドウのハンドル,文字列,文字列の文字数):文字列のバイト数
    apiPfncGetWindowText = Empty
    If myXlonhWnd = 0 Then GoTo ExitPath
'//ウインドウのタイトルバーの文字列を取得
  Dim myXstrWndwTtlName As String, myXlonLen As Long
    myXstrWndwTtlName = String(coXlonBuf, vbNullChar)   'バッファを確保
    myXlonLen = Len(myXstrWndwTtlName)
  Dim myXlonRet As Long
    myXlonRet = GetWindowText(myXlonhWnd, myXstrWndwTtlName, myXlonLen)
    If myXlonRet = 0 Then GoTo ExitPath
'//取得した文字列からバッファのNullを除去
    If Right(myXstrWndwTtlName, 1) <> vbNullChar Then GoTo ExitPath
  Dim i As Long, n As Long
    For i = Len(myXstrWndwTtlName) To 1 Step -1
        If Mid(myXstrWndwTtlName, i, 1) <> vbNullChar Then
            n = i: Exit For
        End If
    Next i
    apiPfncGetWindowText = Left(myXstrWndwTtlName, n)
    Exit Function
ExitPath:
'    MsgBox "タイトルバーの文字列取得無し"   'Debug.Print
End Function

 '定型Ｆ_文字列の右からの文字位置を取得する
Private Function PfncPseudoInStrRev( _
            ByVal myXstrString As String, ByVal myXstrDesChar As String) As Long
    PfncPseudoInStrRev = Empty
    If myXstrString = "" Or myXstrDesChar = "" Then Exit Function
  Dim i As Long
    For i = Len(myXstrString) - Len(myXstrDesChar) + 1 To 1 Step -1
        If Mid(myXstrString, i, Len(myXstrDesChar)) = myXstrDesChar Then
            PfncPseudoInStrRev = i
            Exit For
        End If
    Next i
End Function

 '定型Ｆ_MsgBox関数でOK/キャンセルを確認する
Private Function PfnclonMsgBoxOKCancel( _
            ByVal myXstrTitle As String, ByVal myXstrPrompt As String) As Long
'vbOK=1 / vbCancel=2
    PfnclonMsgBoxOKCancel = Empty
    If myXstrTitle = "" Then myXstrTitle = "OK/キャンセルの選択"
    If myXstrPrompt = "" Then myXstrPrompt = myXstrTitle
    PfnclonMsgBoxOKCancel = MsgBox(myXstrPrompt, vbOKCancel, myXstrTitle)
End Function

 '定型Ｆ_起動中でアクティブ状態のエクスプローラのアドレスを取得する
Private Function PfncstrExplorerAddressBar( _
            Optional ByVal coXdobPauseTime As Double = 0.1) As String
    PfncstrExplorerAddressBar = Empty
  Dim myXstrSendKey As String, myXdatStart As Date
'「ALT+D(アドレスバーを選択)」のキーストロークを送信
    myXdatStart = Timer
    Do While Timer < myXdatStart + coXdobPauseTime
        DoEvents
    Loop
    myXstrSendKey = "%D"
    Call SendKeys(myXstrSendKey, True)
'「CTRL+C(選択部分のコピー)」のキーストロークを送信
    myXdatStart = Timer
    Do While Timer < myXdatStart + coXdobPauseTime
        DoEvents
    Loop
    myXstrSendKey = "^C"
    Call SendKeys(myXstrSendKey, True)
'「ENTER」のキーストロークを送信
    myXdatStart = Timer
    Do While Timer < myXdatStart + coXdobPauseTime
        DoEvents
    Loop
    myXstrSendKey = "{ENTER}"
    Call SendKeys(myXstrSendKey, True)
'クリップボードの格納データを取得
  Dim myXdobClpBrd As New DataObject
  Dim myXstrWndwAdrs As String
    With myXdobClpBrd
        .GetFromClipboard               'クリップボードからDataObjectにデータを取得
        myXstrWndwAdrs = .GetText       'DataObjectのデータを変数に格納
    End With
    PfncstrExplorerAddressBar = myXstrWndwAdrs
End Function

 '定型Ｐ_一時停止する
Private Sub PfixWait(Optional ByVal coXdobPauseTime As Double = 1)
  Dim myXdatStart As Date: myXdatStart = Timer
    Do While Timer < myXdatStart + coXdobPauseTime
        DoEvents
    Loop
End Sub

 '定型Ｆ_指定フォルダの存在を確認する
Private Function PfncbisCheckFolderExist(ByVal myXstrDirPath As String) As Boolean
    PfncbisCheckFolderExist = False
    If myXstrDirPath = "" Then Exit Function
  Dim myXobjFSO As Object: Set myXobjFSO = CreateObject("Scripting.FileSystemObject")
    PfncbisCheckFolderExist = myXobjFSO.FolderExists(myXstrDirPath)
    Set myXobjFSO = Nothing
End Function

'DummyＰ_
Private Sub CsubDummy()
End Sub

'===============================================================================================

''◆ClassProc名_起動中の最前面のエクスプローラのアドレスバーを取得する
'Private Sub instCExplrAdrs()
'  Dim myXstrExplrAdrs As String
''//クラス内変数への入力
'  Dim myXbisMsgOptn As String
'    myXbisMsgOptn = False
'    'myXbisMsgOptn = False : ウィンド選択の確認メッセージを表示しない
'    'myXbisMsgOptn = True  : ウィンド選択の確認メッセージを表示する
''//CExplrAdrsクラスモジュールのインスタンス生成
'  Dim myXinsExplrAdrs As CExplrAdrs: Set myXinsExplrAdrs = New CExplrAdrs
'    With myXinsExplrAdrs
'    '//クラス内変数への入力
'        .letMsgOptn = myXbisMsgOptn
'    '//クラス内プロシージャの実行とクラス内変数からの出力
'        myXstrExplrAdrs = .fncstrExplorerAddress
'    End With
'    Set myXinsExplrAdrs = Nothing
'    Debug.Print "取得データ: " & myXstrExplrAdrs
'End Sub
